#			

from opensky_api import OpenSkyApi
from datetime import datetime
import urllib
import time
import csv
import json
import sys
import requests


###Settings####
TCurl = 'http://locsrb.camende.nl'			#Server address of traccar system i.e. 'http://demo.traccar.org'
TCportU = ''			 			#port voor API OSMand
TCportR = ''						#port for traccar system usually ':8082' 
Traccar_user = ''				#User for traccar (user needs to have access to group in where devices are located) 
Traccar_password = ''		#Traccar User password
OpenSky_user = ''				#Opensky user name (if filled lowest update value is 7 seconds, Can be empty, but then lowest update value is 15 seconds)
OpenSky_Password = ''		#Opensky user password (if filled lowest update value is 7 seconds, can be empty but then lowest update value is 15 seconds)
update  = 15						#How long untill the script makes another API call if Opensky User & PW are filled, minimum is 7 seconds, if not then minimum is 15 seconds
s = None
### read TC devices.
TCupdate = 0
def tcdev():   #De API voor Traccar Devices
	payload = {}
	response = requests.get(TCurl + TCportR + '/api/devices', auth=(Traccar_user, Traccar_password), params=payload, timeout=1.000)
#	print (response.status_code)
	if not str(response.status_code) == '200': #generate error if HTML response is unequal to 200K
		print ("Serverstatus: " + str(response.status_code) + " Server: "+ TCurl + "  Account: " + Traccar_user)
	else:
#		data = json.loads(response.content)[0]
		gevonden = response.json()
#		print (gevonden)
		uitvraag = []
		for d in gevonden: #Reading records and strip off AIR- 
			uniqueId = d['uniqueId']
			transponder = uniqueId.strip('AIR-')+','
			uitvraag.append(transponder)
#			print(uitvraag)
		return uitvraag
def listtostring(s):   #turn JSON into string
		# initialize an empty string
		str1 = ""
		if not s == None:
				for ele in s:
						str1 += ele
		else:
				str1 = "Geen items gevonden"
		# return string
		return str1
print('start script')
while True:
		nu = int(datetime.utcnow().timestamp())
		count = 0
		query = listtostring(tcdev())
		query = query.lower() #opensky does not work with CAPS, so forced lowercase 
		print ("Request to OpenSky: "+ query)
		#attempt to reach opensky 
		if len(OpenSky_user)== 0:
			api = OpenSkyApi()
			print("anonymous login OpenSky")
		else:
			api = OpenSkyApi(OpenSky_user, OpenSky_Password)
		try:
			states = api.get_states(icao24=query)
			for s in states.states:
				c_icao24 =  str(s.icao24)
				try: #If fight online,  there is a time Position
					tp = int(s.time_position)
				except: #No Time, for error it is 1
					tp = 1
					print ("no time")
				try: #If fight online,  there is a time Contact
					tc = int(s.last_contact)
				except: #No Time, for error it is 1
					tc = 1
					print ("no time")

				if tc == 1: #If no time, no update
					c_status  = False
				else:
					c_status = True

#Only proceed if usefull, as opensky does not generate data if none of the requested flights are online
				if c_status == True:
					c_TC_id  =  'AIR-'+str(c_icao24)  #Identifier for Traccar
					c_timestampPOS = datetime.utcfromtimestamp(tp).isoformat()
					c_timestampCON = datetime.utcfromtimestamp(tc).isoformat()
					c_longitude = s.longitude
					c_latitude = s.latitude
					c_heading = s.heading
					c_rescount = s.position_source
					c_ground = s.on_ground
					if s.velocity == None: #is the velocity known?
						c_speed = 0
					else:
						c_speed = int(s.velocity)*1.94384449 #Convert speed from Meters per second to knots
						if s.baro_altitude == None:  #is the Baro Altitude available?
							if s.geo_altitude == None: #If no Baro Altitude available, is GEO available?
								c_altitude = 0 #If no Baro Altitude and no GEO available then 0
							else:
								c_altitude = int(s.geo_altitude)
						else:
							c_altitude = int(s.baro_altitude)
					TC_urlU = str(TCurl)+str(TCportU)+'/?id='+str(c_TC_id)+'&lat='+str(c_latitude)+'&lon='+str(c_longitude)+'&timestamp='+str(c_timestampPOS)+'Z&altitude='+str(c_altitude)+'&speed='+str(c_speed)+'&heading='+str(c_heading)+'&sensors='+str(c_rescount)+'&On_ground='+str(c_ground)+'&icao24='+str(s.icao24)+'&callsign='+str(s.callsign)
#					print(str(c_TC_id)+' '+str(s.callsign)+'		'+str(c_latitude)+'	 '+str(c_longitude)+'	'+str(c_timestampCON)+' '+str(c_timestampPOS)+' '+str(c_altitude)+'	 '+str(c_speed)+'		'+str(c_heading)+'	'+str(c_rescount)+'	'+str(c_ground)+'	'+str(s.icao24)+'	'+str(s.callsign))
					print("Push to Traccar: "+ TC_urlU)
					count = count+1
					try:
						urllib.request.urlopen(TC_urlU)
					except Exception as e:
						print(str(e) + " | " + str(s.callsign))
				else:
					print ("Flight offline "+ str(s.icao24))
		except Exception as e:
			print(str(e))
		nu_r = datetime.utcfromtimestamp(nu)
		#Fictional device to report API on or offline, adjust lat=54&lon=3 to match your map area
		TC_urlU = str(TCurl)+str(TCportU)+'/?id=SUair&lat=54&lon=3'+'&timestamp='+str(nu_r.isoformat())+'Z&altitude='+str(count)+'&heading='+str(nu_r.minute*6)
		try:
			urllib.request.urlopen(TC_urlU)
		except Exception as e:
			print(str(e))
		time.sleep(update)
